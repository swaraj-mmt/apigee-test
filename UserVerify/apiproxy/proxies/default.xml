<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ProxyEndpoint name="default">
    <Description/>
<FaultRules>
	<FaultRule name="InvalidApiKey">
		<Condition>fault.name = "invalid_client"</Condition>
		<Step>
			<FaultRules />
			<Name>authenticationFailed</Name>
		</Step>
	</FaultRule>
	<FaultRule name="InvalidProduct">
		<Condition>fault.name = "InvalidAPICallAsNoApiProductMatchFound"</Condition>
		<Step>
			<FaultRules />
			<Name>authorizationFailed</Name>
		</Step>
	</FaultRule>
</FaultRules>
    <Flows>
        <Flow name="verify">
		<Request>
				<Step>
					<Condition>(request.header.Authorization.values.count = 0)</Condition>
					<FaultRules />
					<Name>challengeResponse</Name>
				</Step>
				<Step>
					<FaultRules />
					<Name>setGrantType</Name>
				</Step>
				<Step>
					<Condition>(request.header.Authorization =| "Basic")</Condition>
					<FaultRules />
					<Name>validateBasicAuth</Name>
				</Step>
			            
                <Step>
                    <FaultRules/>
                    <Name>GenerateUUID</Name>
                </Step>
                 <Step>
                    <FaultRules/>
                    <Name>SetSessionPayload</Name>
                </Step>
                 <Step>
                    <FaultRules/>
                    <Name>Session.SetInCache</Name>
                </Step>         
            </Request>
      <Response>
                 <Step>
                    <FaultRules/>
                    <Name>RedirectAuthorizeCall</Name>
                </Step>         
      </Response>

            <Condition>(proxy.pathsuffix MatchesPath &quot;/verify&quot;)</Condition>
    </Flow>
           <Flow name="callback">
            <Request>
                <Step>
                    <FaultRules/>
                    <Name>ExtractSessionIdFromUrl</Name>
                </Step>
                <Step>
                    <FaultRules/>
                    <Name>Session.GetFromCache</Name>
                </Step>
				<Step>
					<FaultRules />
					<Condition>(session.Payload != null)</Condition>
					<Name>ExtractSessionVariables</Name>
				</Step>  
                 <Step>
					<Condition>(session.Payload != null) and (request.queryparam.error = null)</Condition>
                    <Name>AccessTokenRequest.Create</Name>
                </Step>
                   <Step>
					<Condition>(session.Payload != null) and (request.queryparam.error = null)</Condition>
                    <Name>AccessTokenRequest.Callout</Name>
                </Step>
                 <Step>
					<Condition>(session.Payload != null) and (request.queryparam.error = null)</Condition>
                    <Name>AccessTokenRequest.AssignResponse</Name>
                </Step>
                   <Step>
                    <FaultRules/>
                    <Condition>(session.Payload != null) and (request.queryparam.error = null)</Condition>
                    <Name>AccessTokenRequest.ExtractResponse</Name>
                </Step>
                 <Step>
                    <Condition>(session.Payload != null) and (request.queryparam.error = null)</Condition>
                    <Name>GetUserInfo.Create</Name>
                </Step>
                   <Step>
                    <Condition>(session.Payload != null) and (request.queryparam.error = null)</Condition>
                    <Name>GetUserInfo.Callout</Name>
                </Step>
                <Step>
                    <Condition>(session.Payload != null) and (request.queryparam.error = null) and (gui.response.status.code = 200)</Condition>
                    <Name>GetUserInfo.ExtractResponse</Name>
                </Step>
				<Step>
                    <Condition>(session.Payload != null) and (request.queryparam.error = null) and (gui.response.status.code = 200)</Condition>
					<Name>VerifyUserJs</Name>
				</Step>        
            </Request>
      <Response>
                   <Step>
                    <FaultRules/>
                <Condition>(verificationStatus=="pass") and (gui.response.status.code =200) and (session.Payload != null)</Condition>
                    <Name>RedirectVerificationStatus</Name>
                </Step>  
                   <Step>
                    <FaultRules/>
                 <Condition>(verificationStatus != "pass") and (session.Payload != null) and (request.queryparam.error != "refused")</Condition>
                    <Name>RedirectErrorToApp</Name>
                </Step>   
               <Step>
                    <FaultRules/>
                 <Condition> (session.Payload != null) and (request.queryparam.error="refused")</Condition>
                    <Name>RedirectUserDenialToApp</Name>
                </Step>    
                <Step>
                 <Condition>(session.Payload = null)</Condition>
                    <Name>AssignErrorResponse</Name>
                </Step>    
                
                
      </Response>

            <Condition>(proxy.pathsuffix MatchesPath &quot;/callback/{sessionId}&quot;)</Condition>
    </Flow>
        </Flows>

    <HTTPProxyConnection>
        <BasePath>/user</BasePath>
        <VirtualHost>default</VirtualHost>
        <VirtualHost>secure</VirtualHost>
    </HTTPProxyConnection>
    <RouteRule name="default">
<!--         <TargetEndpoint>default</TargetEndpoint> -->
    </RouteRule>
>
</ProxyEndpoint>
